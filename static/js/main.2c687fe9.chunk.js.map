{"version":3,"sources":["Images/0.jpg","Images/1.jpg","Images/2.jpg","Images/3.jpg","Images/4.jpg","Images/5.jpg","serviceWorker.js","WeatherContext.js","GeoLocation.js","WeatherForcast.js","Footer.js","App.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","WeatherContext","createContext","WeatherContextProvider","children","useState","APPID","LOCATION","TEMP_UNIT","APIState","setAPIState","IS_LOADING","ERROR","CITY","NATION","AVG_TEMP","WEATHER","WEATHER_ICON","PRESSURE","HUMIDITY","WIND_SPEED","WIND_DIR","fetchedDataState","setFetchedDataState","useEffect","Axios","get","raw_data","data","name","sys","country","main","temp","weather","icon","pressure","humidity","wind","speed","Math","floor","deg","e","message","Provider","value","GeoLocation","useContext","UNIT","setState","className","onSubmit","preventDefault","target","blur","document","getElementsByClassName","focus","type","placeholder","required","onChange","selectedOptions","defaultValue","WeatherForcast","src","alt","Footer","href","randInt","round","random","App","style","backgroundColor","backgroundImage","i0","i1","i2","i3","i4","i5","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,mBCA3CD,EAAOC,QAAU,IAA0B,+B,0JCYrCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,4lBC5F1D,IAAMC,EAAiBC,0BAgEfC,EA9DgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAQfC,mBANX,CACnBC,MAAO,mCACPC,SAAU,QACVC,UAAW,WALkC,mBAQxCC,EARwC,KAQ9BC,EAR8B,OAyBCL,mBAfnB,CAC3BM,YAAY,EACZC,OAAO,EAEPC,KAAM,KACNC,OAAQ,KACRC,SAAU,KACVC,QAAS,KACTC,aAAc,KACdC,SAAU,KACVC,SAAU,KACVC,WAAY,KACZC,SAAU,OAtBmC,mBAyBxCC,EAzBwC,KAyBtBC,EAzBsB,KAuD/C,OA5BAC,qBAAU,WACRC,IAAMC,IAAI,qDAAsDjB,EAASF,SAAU,UAAWE,EAASH,MAAQ,UAAYG,EAASD,WACjIrB,MAAM,SAACwC,GACN,IAAMC,EAAOD,EAASC,KAEtBL,EAAoB,EAAD,GACdD,EADc,CAEjBX,YAAY,EACZC,OAAO,EACPC,KAAMe,EAAKC,KACXf,OAAQc,EAAKE,IAAIC,QACjBhB,SAAUa,EAAKI,KAAKC,KACpBjB,QAASY,EAAKM,QAAQ,GAAGF,KACzBf,aAAcW,EAAKM,QAAQ,GAAGC,KAC9BjB,SAAUU,EAAKI,KAAKI,SACpBjB,SAAUS,EAAKI,KAAKK,SACpBjB,WAAYQ,EAAKU,KAAKC,MACtBlB,SAAU,CAAC,IAAI,KAAK,IAAK,KAAK,IAAI,KAAK,IAAI,MAAQmB,KAAKC,MAAOb,EAAKU,KAAKI,IAAM,GAAM,IAAQ,SAGhG3C,OAAO,SAAC4C,GACPpB,EAAoB,EAAD,GACdD,EADc,CAEjBV,MAAqB,kBAAd+B,EAAEC,QAA8B,0BAA4B,0BAGxE,CAACnC,IAGF,kBAACR,EAAe4C,SAAhB,CAAyBC,MAAQ,CAAErC,WAAUC,cAAaY,qBACtDlB,I,+jBCzDR,IAsDe2C,EAtDK,WAAO,IAAD,EAEUC,qBAAW/C,GAArCQ,EAFgB,EAEhBA,SAAUC,EAFM,EAENA,YAFM,EAIEL,mBAAS,CACjCE,SAAU,GACV0C,KAAM,WANgB,mBAIjBxD,EAJiB,KAIVyD,EAJU,KAyCxB,OACE,yBAAKC,UAAU,eACb,0BAAMC,SAlCW,SAACT,GACpBA,EAAEU,iBACFV,EAAEW,OAAO,GAAGC,OACZC,SAASC,uBAAuB,kBAAkB,GAAGC,QAErDhD,EAAY,KACPD,EADM,CAETF,SAAUd,EAAMc,YAElB2C,EAAS,KACJzD,EADG,CAENc,SAAU,QAwBR,2BAAOoD,KAAK,OAAOC,YAAY,4CAA4CC,UAAQ,EAACf,MAAOrD,EAAMc,SAAUuD,SArB5F,SAACnB,GACpBO,EAAS,KACJzD,EADG,CAENc,SAAUoC,EAAEW,OAAOR,aAoBnB,4BAAQgB,SAhBa,SAACnB,GACxBjC,EAAY,KACPD,EADM,CAETD,UAAWmC,EAAEW,OAAOS,gBAAgB,GAAGjB,SAEzCI,EAAS,KACJzD,EADG,CAENwD,KAAMN,EAAEW,OAAOS,gBAAgB,GAAGjB,UASIkB,aAAevE,EAAMwD,MACzD,4BAAQH,MAAM,UAAd,WACA,4BAAQA,MAAM,YAAd,iBCzBOmB,EAzBQ,WAAO,IAAD,EAEYjB,qBAAW/C,GAA1CqB,EAFmB,EAEnBA,iBAAkBb,EAFC,EAEDA,SAE1B,OACE,yBAAK0C,UAAU,mBAEgB,IAA3B7B,EAAiBV,MACfU,EAAiBX,WAAa,aAC5B,oCACE,yBAAKuD,IAAO,oCAAqC5C,EAAiBL,aAAc,UAAYkC,UAAU,cAAcgB,IAAI,iBACxH,yBAAKhB,UAAU,YAAa7B,EAAiBT,KAAO,KAAOS,EAAiBR,QAC5E,yBAAKqC,UAAU,iBAAkB7B,EAAiBP,SAAlD,QAA2F,WAAvBN,EAASD,UAA0B,IAAQ,KAC/G,yBAAK2C,UAAU,WAAY7B,EAAiBN,SAC5C,yBAAKmC,UAAU,QAAf,SAA8B7B,EAAiBF,WAA/C,IAAqF,WAAvBX,EAASD,UAA0B,YAAgB,aAAjH,OAAsIc,EAAiBD,SAAvJ,KACA,yBAAK8B,UAAU,UAAf,aAAoC7B,EAAiBH,SAArD,iBAA+EG,EAAiBJ,SAAhG,UAIN,yBAAKiC,UAAU,SAAf,UAAgC7B,EAAiBV,SCZ1CwD,EATA,WACb,OACE,yBAAKjB,UAAU,UACb,qCAAY,uBAAGkB,KAAK,qCAAR,oBACZ,6D,8GCSAC,EAAU9B,KAAK+B,MAAsB,EAAhB/B,KAAKgC,UAejBC,EAbH,WACV,OACE,yBAAKtB,UAAU,MAAMuB,MAAO,CAC1BC,gBAAiB,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,WAAWL,GAC/EM,gBAAgB,OAAD,OAAU,CAACC,IAAIC,IAAIC,IAAIC,IAAIC,IAAIC,KAAIZ,GAAnC,OAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCfNa,IAASC,OAAO,kBAAC,EAAD,KAAwB,kBAAC,EAAD,OAAkC5B,SAAS6B,eAAe,SNY3F,SAAkBtG,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsG,IAAIC,WAAwB9G,OAAOC,SAAS2F,MACpDmB,SAAW/G,OAAOC,SAAS8G,OAIvC,OAGF/G,OAAOgH,iBAAiB,QAAQ,WAC9B,IAAM3G,EAAK,UAAMyG,WAAN,sBAEPhH,IAgEV,SAAiCO,EAAOC,GAEtC2G,MAAM5G,GACHK,MAAK,SAAAwG,GAEJ,IAAMC,EAAcD,EAASE,QAAQnE,IAAI,gBAEnB,MAApBiE,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/G,UAAUC,cAAc+G,MAAM7G,MAAK,SAAAC,GACjCA,EAAa6G,aAAa9G,MAAK,WAC7BV,OAAOC,SAASwH,eAKpBrH,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuG,CAAwBrH,EAAOC,GAI/BC,UAAUC,cAAc+G,MAAM7G,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OMtC/BE,K","file":"static/js/main.2c687fe9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.b9cf1e12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.ef7fb1b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.7ab854d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.5d942457.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.b5e956af.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.8b239f69.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext, useState, useEffect } from 'react'\r\n\r\nimport Axios from 'axios'\r\n\r\nexport const WeatherContext = createContext()\r\n\r\nconst WeatherContextProvider = ({ children }) => {\r\n\r\n  const initAPIState = {\r\n    APPID: '0ce3eff54aefbfce2ef8944385a448bb',\r\n    LOCATION: 'Ajmer',\r\n    TEMP_UNIT: 'metric', // Default: Kelvin, metric: Celsius, imperial: Fahrenheit\r\n  }\r\n\r\n  const [APIState, setAPIState] = useState(initAPIState)\r\n\r\n  const initFetchedDataState = {\r\n    IS_LOADING: true,\r\n    ERROR: false,\r\n\r\n    CITY: null,\r\n    NATION: null,\r\n    AVG_TEMP: null,\r\n    WEATHER: null,\r\n    WEATHER_ICON: null,\r\n    PRESSURE: null,\r\n    HUMIDITY: null,\r\n    WIND_SPEED: null,\r\n    WIND_DIR: null\r\n  }\r\n\r\n  const [fetchedDataState, setFetchedDataState] = useState(initFetchedDataState)\r\n\r\n  useEffect(() => {\r\n    Axios.get(\"https://api.openweathermap.org/data/2.5/weather?q=\"+ APIState.LOCATION +\"&APPID=\"+ APIState.APPID + \"&units=\" + APIState.TEMP_UNIT)\r\n      .then( (raw_data) => {\r\n        const data = raw_data.data\r\n\r\n        setFetchedDataState({\r\n          ...fetchedDataState,\r\n          IS_LOADING: false,\r\n          ERROR: false,\r\n          CITY: data.name,\r\n          NATION: data.sys.country,\r\n          AVG_TEMP: data.main.temp,\r\n          WEATHER: data.weather[0].main,\r\n          WEATHER_ICON: data.weather[0].icon,\r\n          PRESSURE: data.main.pressure,\r\n          HUMIDITY: data.main.humidity,\r\n          WIND_SPEED: data.wind.speed,\r\n          WIND_DIR: [\"N\",\"NE\",\"E\", \"SE\",\"S\",\"SW\",\"W\",\"NW\"][((Math.floor((data.wind.deg / 45) + 0.5)) % 8)]\r\n        })\r\n      })\r\n      .catch( (e) => {\r\n        setFetchedDataState({\r\n          ...fetchedDataState,\r\n          ERROR: e.message === \"Network Error\" ? \"No Internet Connection!\" : \"Data not found!\"\r\n        })\r\n      })\r\n  }, [APIState])\r\n\r\n  return (\r\n    <WeatherContext.Provider value={ { APIState, setAPIState, fetchedDataState } }>\r\n      { children }\r\n    </WeatherContext.Provider>\r\n  )\r\n}\r\n\r\nexport default WeatherContextProvider\r\n\r\n","import React, { useContext, useState } from 'react'\r\n\r\nimport { WeatherContext } from './WeatherContext'\r\n\r\n// import CityList from './list.json'\r\n\r\nconst GeoLocation = () => {\r\n\r\n  const { APIState, setAPIState } = useContext(WeatherContext)\r\n\r\n  const [state, setState] = useState({\r\n    LOCATION: '',\r\n    UNIT: 'metric'\r\n  })\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    e.target[0].blur()\r\n    document.getElementsByClassName(\"WeatherForcast\")[0].focus()\r\n\r\n    setAPIState({\r\n      ...APIState,\r\n      LOCATION: state.LOCATION\r\n    })\r\n    setState({\r\n      ...state,\r\n      LOCATION: ''\r\n    })\r\n  }\r\n  const handleChange = (e) => {\r\n    setState({\r\n      ...state,\r\n      LOCATION: e.target.value\r\n    })\r\n  }\r\n\r\n  const handleUnitChange = (e) => {\r\n    setAPIState({\r\n      ...APIState,\r\n      TEMP_UNIT: e.target.selectedOptions[0].value\r\n    })\r\n    setState({\r\n      ...state,\r\n      UNIT: e.target.selectedOptions[0].value\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"GeoLocation\">\r\n      <form onSubmit={ handleSubmit }>\r\n        <input type=\"text\" placeholder=\"City Name / PIN (Example: Ajmer / 305001)\" required value={state.LOCATION} onChange={ handleChange } />\r\n      </form>\r\n      <select onChange={ handleUnitChange } defaultValue={ state.UNIT }>\r\n        <option value=\"metric\">Celsius</option>\r\n        <option value=\"imperial\">Fahrenheit</option>\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GeoLocation\r\n","import React, { useContext } from 'react'\r\n\r\nimport { WeatherContext } from './WeatherContext'\r\n\r\nconst WeatherForcast = () => {\r\n\r\n  const { fetchedDataState, APIState } = useContext(WeatherContext)\r\n\r\n  return (\r\n    <div className=\"WeatherForcast\">\r\n      {  }\r\n      { fetchedDataState.ERROR === false ? (\r\n          fetchedDataState.IS_LOADING ? \"Loading...\" : (\r\n            <>\r\n              <img src={  \"http://openweathermap.org/img/wn/\"+ fetchedDataState.WEATHER_ICON +\"@2x.png\" } className=\"WeatherIcon\" alt=\"Weather Icon\" />\r\n              <div className=\"Location\">{ fetchedDataState.CITY + \", \" + fetchedDataState.NATION }</div>\r\n              <div className=\"AvgTemprature\">{ fetchedDataState.AVG_TEMP }&deg; { APIState.TEMP_UNIT === 'metric' ? ('C') : ('F') }</div>\r\n              <div className=\"Weather\">{ fetchedDataState.WEATHER }</div>\r\n              <div className=\"Wind\">Wind: { fetchedDataState.WIND_SPEED } { APIState.TEMP_UNIT === 'metric' ? ('meter/sec') : ('miles/hour') } in { fetchedDataState.WIND_DIR } </div>\r\n              <div className=\"HumPre\">Humidity: { fetchedDataState.HUMIDITY }% | Pressure: { fetchedDataState.PRESSURE } hPa </div>\r\n            </>\r\n          )\r\n      ) : (\r\n        <div className=\"Error\">Error: { fetchedDataState.ERROR }</div>\r\n      ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherForcast\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <div>&copy; <a href=\"https://vaibhavacharya.github.io/\">Vaibhav Acharya</a></div>\r\n      <div>Data by openweathermap.org</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\n\nimport GeoLocation from './GeoLocation'\nimport WeatherForcast from './WeatherForcast'\nimport Footer from './Footer'\n\nimport './App.css';\n\nimport i0 from './Images/0.jpg'\nimport i1 from './Images/1.jpg'\nimport i2 from './Images/2.jpg'\nimport i3 from './Images/3.jpg'\nimport i4 from './Images/4.jpg'\nimport i5 from './Images/5.jpg'\n\nconst randInt = Math.round(Math.random() * 5)\n\nconst App = () => {\n  return (\n    <div className=\"App\" style={{\n      backgroundColor: [\"#263238\",\"#2196f3\",\"#f44336\",\"#009688\",\"#4caf50\",\"#673ab7\"][randInt],\n      backgroundImage: `url(${ [i0, i1, i2, i3, i4, i5][randInt] })`\n    }}>\n      <GeoLocation />\n      <WeatherForcast />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport WeatherContextProvider from './WeatherContext'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<WeatherContextProvider><App /></WeatherContextProvider>, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}